package com.mycompany.softwaredevassignment;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/*
This class is the JSwing for displaying the admin menu and handling operations with the GUI.
*/

public class AdminMenu extends javax.swing.JFrame {

    /**
     * Creates new form AdminMenu
     */
    public AdminMenu() {
        initComponents();
        
        initTable(getTableDropdown.getSelectedItem().toString());
    }
    
    // Used to fill the Jtable with the SQL data, dependent on what table is passed through with the parameter.
    void initTable(String table) {
        model = new AdminTable(table);
        
        adminTable.setModel(model);
        
        for (int col = 0; col < adminTable.getColumnCount(); col++) {
            TableColumn column = adminTable.getTableHeader().getColumnModel().getColumn(col);
            column.setHeaderValue(model.getColumnNames()[col]);
        }
    }
    
    // Used for close processes where the window closes but not the application exitting.
    public void close(){
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LTSUIcon = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        adminTable = new javax.swing.JTable();
        getTableButton = new javax.swing.JButton();
        insertButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        getTableDropdown = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        adminConsole = new javax.swing.JTextArea();

        LTSUIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\aws.admin\\OneDrive - Leeds Trinity University\\NetBeansProjects\\SoftwareDevAssignment\\src\\resources\\images\\LTSU Logo mini.png")); // NOI18N

        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        adminTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        adminTable.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(adminTable);

        getTableButton.setText("Get Table");
        getTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getTableButtonActionPerformed(evt);
            }
        });

        insertButton.setText("Insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        getTableDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "modules", "account", "course" }));

        adminConsole.setColumns(20);
        adminConsole.setRows(5);
        jScrollPane2.setViewportView(adminConsole);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(insertButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(getTableButton)
                                .addGap(18, 18, 18)
                                .addComponent(getTableDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateButton)
                            .addComponent(deleteButton))
                        .addGap(112, 112, 112)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(getTableButton)
                            .addComponent(updateButton)
                            .addComponent(getTableDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(insertButton)
                            .addComponent(deleteButton)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getTableButtonActionPerformed
        // Passes the current table selected in the dropdown to then reilitalise the data from that table
        initTable(getTableDropdown.getSelectedItem().toString());
    }//GEN-LAST:event_getTableButtonActionPerformed

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        // Begins the operation for inserting data into the table. First getting the currently selected table from dropdown.
        String targetTable = getTableDropdown.getSelectedItem().toString();
        ArrayList<String> insertData = new ArrayList<>();
        String input;
        
        // The If is used to determine which table is being inserted into, then running the process related to that table to get the data from the user.
        if (targetTable.equals("modules")) {
            while (true) {
                input = JOptionPane.showInputDialog("Enter moduleID");
                if (input == null) {
                    return;
                }
                try {
                    int moduleID = Integer.parseInt(input);
                    insertData.add(input);
                    break;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Error: Invalid input, needs to be an integer");;
                }
            }
            while (true) {
                String courseID = JOptionPane.showInputDialog("Enter courseID");
                if (courseID == null) {
                    return;
                } else if (Database.isCourse(courseID)) {
                    insertData.add(courseID);
                    break;
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Course not found, try again.");
                }
            }
            while (true) {
                input = JOptionPane.showInputDialog("Enter level");
                if (input == null) {
                    return;
                }
                try {
                    int level = Integer.parseInt(input);
                    insertData.add(input);
                    break;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Error: Invalid input, needs to be an integer");;
                }
            }
            while (true) {
                String moduleName = JOptionPane.showInputDialog("Enter moduleName");
                if (moduleName == null) {
                    return;
                }
                insertData.add(moduleName);
                break;
            }
            while (true) {
                input = JOptionPane.showInputDialog("Enter credits");
                if (input == null) {
                    return;
                }
                try {
                    int credits = Integer.parseInt(input);
                    insertData.add(input);
                    break;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Error: Invalid input, needs to be an integer");;
                }
            }
            while (true) {
                int isCore = JOptionPane.showConfirmDialog(null, "Is the module core?", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION);
                if (isCore == JOptionPane.YES_OPTION) {
                    // If the user chose 'Yes', show a message indicating that changes are saved
                    insertData.add("1");
                    break;
                } else if (isCore == JOptionPane.NO_OPTION) {
                    // If the user chose 'No', show a message indicating that changes are not saved
                    insertData.add("0");
                    break;
                } else {
                    // If the user chose 'Cancel' or closed the dialog, show a message indicating the operation is canceled
                    return;
                }
            }

        }
        else if (targetTable.equals("account")) {
            while (true) {
                String username = JOptionPane.showInputDialog("Enter username");
                if (username == null) {
                    return;
                }
                insertData.add(username);
                break;
            }
            while (true) {
                String password = JOptionPane.showInputDialog("Enter password");
                if (password == null) {
                    return;
                }
                insertData.add(password);
                break;
            }
            while (true) {
                String accountCourse = JOptionPane.showInputDialog("Enter courseID");
                if (accountCourse == null) {
                    return;
                } else if (Database.isCourse(accountCourse)) {
                    insertData.add(accountCourse);
                    break;
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Course not found, try again.");
                }
            }    
            while (true) {
                int isAdministrator = JOptionPane.showConfirmDialog(null, "Is the account an admin?", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION);
                if (isAdministrator == JOptionPane.YES_OPTION) {
                    // If the user chose 'Yes', show a message indicating that changes are saved
                    insertData.add("1");
                    break;
                } else if (isAdministrator == JOptionPane.NO_OPTION) {
                    // If the user chose 'No', show a message indicating that changes are not saved
                    insertData.add("0");
                    break;
                } else {
                    // If the user chose 'Cancel' or closed the dialog, show a message indicating the operation is canceled
                    return;
                }
            }
        }
        else if (targetTable.equals("course")) {
            while (true) {
                String courseID = JOptionPane.showInputDialog("Enter course ID");
                if (courseID == null) {
                    return;
                }
                insertData.add(courseID);
                break;
            }
            while (true) {
                String courseName = JOptionPane.showInputDialog("Enter course name");
                if (courseName == null) {
                    return;
                }
                insertData.add(courseName);
                break;
            }
        }
        else {JOptionPane.showMessageDialog(null, "Error: No table Found"); return;}
        
        // After the if is processed, and the data is collected into insertData, it is then passed through to the database method along with the target
        // table. The resultant message is used for error collection. By default, the message should be null, indicating success, if not, then the
        // operation failed, and the resultant error message is then passed to the adminConsole to see.
        String message = Database.insertSQL(targetTable, insertData);
        if (message == null) {
            adminConsole.setText("\n Insert performed Successfully... \n");
            initTable(getTableDropdown.getSelectedItem().toString());
            return;
        } else {
            adminConsole.setText("\n An Error Occured... \n");
            adminConsole.append("Error: " + message);
        }
    }//GEN-LAST:event_insertButtonActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // Used to remove the current selections on the table by cicking on the empty space in the form.
        adminTable.clearSelection();
    }//GEN-LAST:event_formMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // Begins the operation for updating the table data, finding the selected cell, then getting the desired input. If there isn't a selected cell.
        if (adminTable.getSelectedRowCount() == 1 && adminTable.getSelectedColumnCount() == 1){
            int row = adminTable.getSelectedRow();
            int col = adminTable.getSelectedColumn();
            String colName = adminTable.getColumnName(col);
            String table = getTableDropdown.getSelectedItem().toString();
            String rowID = adminTable.getValueAt(row, 0).toString();
            String value = JOptionPane.showInputDialog("Enter desired data");
            if (value == null) {
                return;
            }
            
            // The updateSQL method is then run to update the SQL database, resultant message used to check if the process was successful. 
            String message = Database.updateSQL(table, row, col, colName, rowID, value);
            if (message == null) {
            adminConsole.setText("\n Update performed Successfully... \n");
            initTable(getTableDropdown.getSelectedItem().toString());
            return;
            } else {
            adminConsole.setText("\n An Error Occured... \n");
            adminConsole.append("Error: " + message);
            }
            
        } else {
            adminConsole.setText("\n Update Failed... \nSelect only one cell.");
            return;
        }
        
        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
                // Begins the operation for updating the table data, finding the selected cell, then getting the desired input. If there isn't a selected cell.
        if (adminTable.getSelectedRowCount() == 1 && adminTable.getSelectedColumnCount() == 1){
            int row = adminTable.getSelectedRow();
            int col = adminTable.getSelectedColumn();
            String colName = adminTable.getColumnName(col);
            String table = getTableDropdown.getSelectedItem().toString();
            String rowID = adminTable.getValueAt(row, 0).toString();
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this row?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (!(confirm == JOptionPane.YES_OPTION)) {
                return;
            }
            
            // The updateSQL method is then run to update the SQL database, resultant message used to check if the process was successful. 
            String message = Database.deleteSQL(table, rowID);
            if (message == null) {
            adminConsole.setText("\n Delete performed Successfully... \n");
            initTable(getTableDropdown.getSelectedItem().toString());
            return;
            } else {
            adminConsole.setText("\n An Error Occured... \n");
            adminConsole.append("Error: " + message);
            }
            
        } else {
            adminConsole.setText("\n Update Failed... \nSelect only one cell.");
            return;
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private AdminTable model;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LTSUIcon;
    private javax.swing.JTextArea adminConsole;
    private javax.swing.JTable adminTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton getTableButton;
    private javax.swing.JComboBox<String> getTableDropdown;
    private javax.swing.JButton insertButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
